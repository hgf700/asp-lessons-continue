        [HttpGet("edit/{id}")]
        public async Task<IActionResult> EditTrip(int id)
        {
            var trip = await _tripService.GetTripById(id);
            if (trip == null) return NotFound();

            var vm = _mapper.Map<TripViewModel>(trip);
            vm.Guides = await _guideService.GetAllGuides().ToListAsync();
            vm.Travelers = await _travelerService.GetAllTravelers()
                .Select(t => new TravelerViewModel { TravelerId = t.TravelerId, Firstname = t.Firstname, Lastname = t.Lastname })
                .ToListAsync();  // Mapowanie na TravelerViewModel

            return View(vm);
        }

        [HttpPost("edit/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditTrip(int id, TripViewModel vm)
        {
            if (!ModelState.IsValid)
            {
                vm.Guides = await _guideService.GetAllGuides().ToListAsync();
                vm.Travelers = await _travelerService.GetAllTravelers()
                    .Select(t => new TravelerViewModel { TravelerId = t.TravelerId, Firstname = t.Firstname, Lastname = t.Lastname })
                    .ToListAsync();  // Mapowanie na TravelerViewModel

                return View(vm);
            }

            var model = _mapper.Map<Trip>(vm);
            model.TripId = id;

            await _tripService.UpdateTrip(model);

            return RedirectToAction(nameof(Index));
        }


        [HttpGet("delete/{id}")]
        public async Task<IActionResult> DeleteTrip(int id)
        {
            var trip = await _tripService.GetTripById(id);
            return trip == null ? NotFound() : View(trip);
        }

        [HttpPost("delete/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteTripConfirmed(int id)
        {
            await _tripService.DeleteTrip(id);
            return RedirectToAction(nameof(Index));
        }








                [HttpGet("edit/{id}")]
        public async Task<IActionResult> Edit(int id)
        {
            var traveler = await _travelerService.GetTravelerById(id);
            if (traveler == null) return NotFound();
            return View(traveler);
        }

        // Edit POST
        [HttpPost("edit/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("TravelerId,Firstname,Lastname,Email,BirthDate")] TravelerViewModel traveler)
        {

            if (ModelState.IsValid)
            {
                await _travelerService.UpdateTraveler(traveler);
                return RedirectToAction(nameof(Index));
            }
            return View(traveler);
        }

        // Delete GET
        [HttpGet("delete/{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var traveler = await _travelerService.GetTravelerById(id);
            if (traveler == null) return NotFound();
            return View(traveler);
        }

        // Delete POST
        [HttpPost("delete/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _travelerService.DeleteTraveler(id);
            return RedirectToAction(nameof(Index));
        }








                // Edit GET
        [HttpGet("edit/{id}")]
        public async Task<IActionResult> Edit(int id)
        {
            var guide = await _guideService.GetGuideById(id);
            if (guide == null) return NotFound();
            return View(guide); // Assuming guide is GuideViewModel or equivalent
        }

        // Edit POST
        [HttpPost("edit/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("GuideId,Firstname,Lastname,Email,BirthDate")] GuideViewModel guideViewModel)
        {
            if (id != guideViewModel.GuideId) return BadRequest();

            if (ModelState.IsValid)
            {
                await _guideService.UpdateGuide(guideViewModel); // Assuming this method accepts GuideViewModel
                return RedirectToAction(nameof(Index));
            }
            return View(guideViewModel);
        }

        // Delete GET
        [HttpGet("delete/{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var guide = await _guideService.GetGuideById(id);
            if (guide == null) return NotFound();
            return View(guide); // Assuming guide is GuideViewModel or equivalent
        }

        // Delete POST
        [HttpPost("delete/{id}")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _guideService.DeleteGuide(id);
            return RedirectToAction(nameof(Index));
        }